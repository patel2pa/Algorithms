from linked_list import Node, LinkedList
from blossom_lib import flower_definitions

class HashMap:
  def __init__(self, array_size):
    self.array_size = array_size
    self.array = [LinkedList() for item in range(array_size)]

  def hash(self, key):
    hash_code = sum(key.encode())
    return hash_code 

  def compressor(self, hash_code):
    return hash_code % self.array_size

  def assign(self, key, value):
    array_index = self.compressor(self.hash(key))
    payload = Node([key, value]) 
    list_at_array = self.array[array_index]
    for itm in list_at_array:
      if itm[0] == key:
        itm[1] = value
        return
    list_at_array.insert(payload)
        
        
    
  def retrieve(self,key):
    array_index = self.compressor(self.hash(key))
    list_at_index = self.array[array_index]
    for itm in list_at_index:
      if itm[0] == key:
        return itm[1]
      else: 
        return None
        
    
    if payload[0] == key:
      return payload[1]
    else:
      return None

blossom = HashMap(len(flower_definitions))
for flower in flower_definitions:
  blossom.assign(flower[0], flower[1])
blossom.retrieve('daisy')
